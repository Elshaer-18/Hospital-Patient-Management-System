<!doctype html>
<html lang="en">
<head>

    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Hospital Patient Management — EHAB_3D_Model</title>
    <style>
        :root {
            --bg: rgba(255, 255, 255, 0.8);
            --card: rgba(255, 255, 255, 0.8);
            --muted: #6b7280;
            --accent: #0ea5a4;
        }

        /* جسم الصفحة */
        body {
            margin: 0;
            padding: 0 24px 24px 24px;
            font-family: Inter, system-ui, Segoe UI, Roboto, Arial, sans-serif;
            line-height: 1.4;
            background: #cce7f0; /* لون الخلفية السماوي */
            color: #000;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        /* شريط العنوان فوق الصورة */
        .top-title {
            max-width: 980px;
            width: 100%;
            text-align: center;
            font-weight: 700;
            font-size: 28px;
            color: #064e4a;
            padding: 14px 0;
            user-select: none;
            letter-spacing: 2px;
        }

        /* الصورة تحت العنوان */
        .header-image {
            width: 100%;
            max-width: 980px;
            height: 250px;
            background-image: url('elshaer.jpg');
            background-size: cover;
            background-position: center;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0,0,0,0.3);
            margin-top: 8px;
        }

        /* صندوق المحتوى تحت الصورة */
        .wrap {
            max-width: 980px;
            width: 100%;
            margin-top: 24px;
            background: rgba(255, 255, 255, 0.15); /* شفافية خفيفة */
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37), 0 4px 16px 0 rgba(0, 0, 0, 0.2);
            backdrop-filter: blur(12px);
            -webkit-backdrop-filter: blur(12px);
            border: 1px solid rgba(255, 255, 255, 0.18);
            color: #000;
            transform-style: preserve-3d;
            transition: transform 0.3s ease;
        }

            /* تأثير 3D بسيط عند المرور على الصندوق */
            .wrap:hover {
                transform: translateZ(20px) scale(1.02);
                box-shadow: 0 20px 40px rgba(31, 38, 135, 0.4), 0 8px 30px rgba(0, 0, 0, 0.3);
            }


        .grid {
            display: grid;
            grid-template-columns: 1fr 320px;
            gap: 18px;
        }

        .card {
            background-color: var(--bg);
            padding: 14px;
            border-radius: 10px;
            box-shadow: 0 6px 18px rgba(16,24,40,0.06);
            color: #000;
        }

        label {
            display: block;
            font-size: 13px;
            margin-top: 8px;
            color: var(--muted);
        }

        input, select, textarea {
            width: 100%;
            padding: 8px;
            margin-top: 6px;
            border: 1px solid #e6e9ef;
            border-radius: 6px;
            font-size: 14px;
        }

        .row {
            display: flex;
            gap: 8px;
            margin-top: 12px;
            flex-wrap: wrap;
        }

        /* أزرار 3D مع ظل وخطوط بارزة */
        button {
            padding: 8px 12px;
            border-radius: 8px;
            border: none;
            background: linear-gradient(145deg, #0ea5a4, #0b7d7b);
            color: white;
            cursor: pointer;
            font-weight: 600;
            font-size: 14px;
            white-space: nowrap;
            box-shadow: 0 6px 0 #0b7d7b, 0 8px 15px rgba(0,0,0,0.3);
            transition: transform 0.1s ease, box-shadow 0.1s ease, background-color 0.3s ease;
            transform-style: preserve-3d;
            perspective: 500px;
            user-select: none;
        }

            button:hover {
                background: linear-gradient(145deg, #13bbb9, #0c8f8c);
            }

            button:active {
                transform: translateY(4px);
                box-shadow: 0 2px 0 #0b7d7b, 0 4px 8px rgba(0,0,0,0.2);
            }

        .muted {
            color: var(--muted);
            font-size: 13px;
        }

        /* Scrollbar for lists */
        .list::-webkit-scrollbar {
            width: 8px;
        }

        .list::-webkit-scrollbar-track {
            background: #f1f1f1;
        }

        .list::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 4px;
        }

            .list::-webkit-scrollbar-thumb:hover {
                background: #555;
            }

        .pill {
            display: inline-block;
            background: #eefaf9;
            color: #064e4a;
            padding: 4px 8px;
            border-radius: 999px;
            font-size: 12px;
            margin-right: 6px;
        }

        footer {
            margin-top: 14px;
            color: var(--muted);
            font-size: 13px;
            text-align: center;
        }

        /* جدول منسق لقسم Queues & History */
        .data-table {
            width: 100%;
            border-collapse: collapse;
            max-height: 220px;
            overflow-y: auto;
            display: block;
            margin-top: 8px;
            color: #000;
            font-size: 13px;
        }

            .data-table thead {
                background-color: #0ea5a4;
                color: white;
                position: sticky;
                top: 0;
            }

            .data-table th, .data-table td {
                padding: 8px 10px;
                border: 1px solid #ccc;
                text-align: left;
            }

            .data-table tbody tr:nth-child(even) {
                background-color: #f9f9f9;
            }
    </style>
</head>

<body>

    <div class="top-title">
        ♕ Elshaer Hospital
    </div>

    <div class="header-image"></div>

    <div class="wrap">
        <div class="grid">
            <section class="card">
                <form id="patientForm">
                    <label>Patient ID</label>
                    <input type="number" id="pid" required />

                    <label>Name</label>
                    <input type="text" id="pname" required />

                    <label>Age</label>
                    <input type="number" id="page" min="0" max="130" required />

                    <label>Condition</label>
                    <select id="pcondition">
                        <option>Normal</option>
                        <option>Emergency</option>
                    </select>

                    <label>Diagnosis</label>
                    <textarea id="pdiag" rows="2"></textarea>

                    <div class="row">
                        <button type="submit">Add Patient</button>
                        <button type="button" id="treatNormal">Treat Next Normal</button>
                        <button type="button" id="treatEmergency">Treat Next Emergency</button>
                        <button type="button" id="clearData">Clear Data</button>
                    </div>
                </form>

                <div class="list">
                    <h3>Actions & Logs</h3>
                    <div id="log" class="small muted">System started.</div>
                </div>
            </section>

            <aside>
                <div class="card">
                    <h3>Queues & History</h3>
                    <div style="margin-top:8px">
                        <div class="pill">Normal Queue: <span id="normalCount">0</span></div>
                        <div class="pill">Emergency Queue: <span id="emergCount">0</span></div>
                        <div class="pill">Emergency Stack: <span id="stackCount">0</span></div>
                    </div>

                    <div style="margin-top:12px">
                        <h4 class="small">Normal Waiting List</h4>
                        <table id="normalTable" class="data-table">
                            <thead>
                                <tr><th>ID</th><th>Name</th><th>Age</th><th>Diagnosis</th></tr>
                            </thead>
                            <tbody></tbody>
                        </table>

                        <h4 class="small">Emergency Waiting List</h4>
                        <table id="emergTable" class="data-table">
                            <thead>
                                <tr><th>ID</th><th>Name</th><th>Age</th><th>Diagnosis</th></tr>
                            </thead>
                            <tbody></tbody>
                        </table>

                        <h4 class="small">Emergency Treatment History (Stack)</h4>
                        <table id="stackTable" class="data-table">
                            <thead>
                                <tr><th>ID</th><th>Name</th><th>Age</th><th>Diagnosis</th></tr>
                            </thead>
                            <tbody></tbody>
                        </table>

                        <h4 class="small">Discharged Patients</h4>
                        <table id="dischargedTable" class="data-table">
                            <thead>
                                <tr><th>ID</th><th>Name</th><th>Age</th><th>Condition</th><th>Diagnosis</th></tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>
                </div>
            </aside>
        </div>

        <footer>
            Tip: You can add patients then "Treat Next" to move them to the discharged list. This is a client-side demo (no server required).
        </footer>
    </div>

    <script>
        // دالة لتشغيل صوت نقر بسيط باستخدام Web Audio API
        function playClickSound() {
            const ctx = new AudioContext();
            const osc = ctx.createOscillator();
            const gainNode = ctx.createGain();

            osc.type = 'square';
            osc.frequency.setValueAtTime(500, ctx.currentTime);
            gainNode.gain.setValueAtTime(0.1, ctx.currentTime);

            osc.connect(gainNode);
            gainNode.connect(ctx.destination);

            osc.start();
            osc.stop(ctx.currentTime + 0.05);

            osc.onended = () => {
                ctx.close();
            };
        }

        const normalQueue = [];
        const emergencyQueue = [];
        const emergencyStack = [];
        const discharged = [];

        function toLowerTrim(s) { return s.replace(/\s+/g, '').toLowerCase(); }
        function log(msg) {
            const el = document.getElementById('log');
            el.innerHTML = new Date().toLocaleTimeString() + ' — ' + msg + '<br/>' + el.innerHTML;
        }

        function saveData() {
            const data = { normalQueue, emergencyQueue, emergencyStack, discharged };
            localStorage.setItem("hospitalData", JSON.stringify(data));
        }

        function loadData() {
            const saved = localStorage.getItem("hospitalData");
            if (saved) {
                const data = JSON.parse(saved);
                normalQueue.splice(0, normalQueue.length, ...data.normalQueue);
                emergencyQueue.splice(0, emergencyQueue.length, ...data.emergencyQueue);
                emergencyStack.splice(0, emergencyStack.length, ...data.emergencyStack);
                discharged.splice(0, discharged.length, ...data.discharged);
            }
        }

        function renderCounts() {
            document.getElementById('normalCount').textContent = normalQueue.length;
            document.getElementById('emergCount').textContent = emergencyQueue.length;
            document.getElementById('stackCount').textContent = emergencyStack.length;
        }

        function renderLists() {
            function fillTable(tableId, data, columns) {
                const tbody = document.querySelector(`#${tableId} tbody`);
                tbody.innerHTML = '';
                data.forEach(p => {
                    const tr = document.createElement('tr');
                    columns.forEach(col => {
                        const td = document.createElement('td');
                        td.textContent = p[col] || '';
                        tr.appendChild(td);
                    });
                    tbody.appendChild(tr);
                });
            }

            fillTable('normalTable', normalQueue, ['id', 'name', 'age', 'diagnosis']);
            fillTable('emergTable', emergencyQueue, ['id', 'name', 'age', 'diagnosis']);

            // نعكس Emergency Stack للعرض الصحيح
            const reversedStack = [...emergencyStack].reverse();
            fillTable('stackTable', reversedStack, ['id', 'name', 'age', 'diagnosis']);

            fillTable('dischargedTable', discharged, ['id', 'name', 'age', 'condition', 'diagnosis']);

            renderCounts();
        }

        // تشغيل الصوت مع كل نقرة زرار
        function attachClickSound(button) {
            button.addEventListener('click', () => {
                playClickSound();
            });
        }

        document.getElementById('patientForm').addEventListener('submit', function (e) {
            e.preventDefault();
            const p = {
                id: Number(document.getElementById('pid').value),
                name: document.getElementById('pname').value.trim(),
                age: Number(document.getElementById('page').value),
                condition: document.getElementById('pcondition').value.trim(),
                diagnosis: document.getElementById('pdiag').value.trim()
            };
            const cond = toLowerTrim(p.condition);
            if (cond === 'emergency') {
                emergencyQueue.push(p);
                log(`Added EMERGENCY patient: ${p.name} (ID:${p.id}, Age:${p.age})`);
            } else {
                normalQueue.push(p);
                log(`Added NORMAL patient: ${p.name} (ID:${p.id}, Age:${p.age})`);
            }
            saveData();
            renderLists();
            this.reset();
        });

        document.getElementById('treatNormal').addEventListener('click', () => {
            if (normalQueue.length === 0) {
                log('No normal patients in waiting list.');
                return;
            }
            const treated = normalQueue.shift();
            discharged.push(treated);
            log(`Treated NORMAL patient: ${treated.name} (ID:${treated.id}, Age:${treated.age}) — moved to discharged.`);
            saveData();
            renderLists();
        });

        document.getElementById('treatEmergency').addEventListener('click', () => {
            if (emergencyQueue.length === 0) {
                log('No emergency patients in queue.');
                return;
            }
            const treated = emergencyQueue.shift();
            emergencyStack.push(treated);
            discharged.push(treated);
            log(`Treated EMERGENCY patient: ${treated.name} (ID:${treated.id}, Age:${treated.age}) — pushed to emergency history and discharged.`);
            saveData();
            renderLists();
        });

        document.getElementById('clearData').addEventListener('click', () => {
            if (confirm("Are you sure you want to clear all data? This cannot be undone.")) {
                normalQueue.length = 0;
                emergencyQueue.length = 0;
                emergencyStack.length = 0;
                discharged.length = 0;
                localStorage.removeItem("hospitalData");
                log("All data cleared.");
                renderLists();
            }
        });

        // إرفاق الصوت لكل الأزرار
        ['patientForm', 'treatNormal', 'treatEmergency', 'clearData'].forEach(id => {
            const el = document.getElementById(id);
            if (el) attachClickSound(el);
        });

        loadData();
        renderLists();
    </script>
</body>
</html>
